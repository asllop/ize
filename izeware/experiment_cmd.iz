// Parse commands

// Expression transfer
traf Suma a:Int, b:Int -> Int
    a + b

// Model transfer
traf MyTransfer in:Tuple[A,B] -> C (
    one: 100,
    two: a+b
)

traf HelloWorld -> Str
    "Hello, World!\n"

// Transfers with "_" as body are defined with the FFI in Rust.
traf Http input:None, config:Request -> Bytes _

// Models with "_" as body are defined with the FFI in Rust.
model ForeignModel _

model EmptyModel ()

model MyAlias Map[Str, MyEvent]

model MyEvent (
    eventType: Str,
    timestamp as "timestamp.ms": Int,
    attributes: Map[Str, Str]
)

const URL "http://example.com"

pipe MyPipe (
    Http(
        method: MethodGet(),
        url: "https://api.ipify.org/?format=json"
    ),
    JsonDeser(MyModel),
    Stdout
)

pipe Empty ()

run MyPipe

run (
    Http(
        method: MethodGet(),
        url: "https://api.ipify.org/?format=json"
    ),
    JsonDeser(MyModel),
    Stdout
)

run ()

traf ExecTransfer fn:Traf[Int,Str] -> Str
    "Result is = " + fn(100)

run ("Hello, World!\n", Stdout)

// Test unicode identifiers and string literals
traf こんにちは _:None -> Str "こんにちは世界！"
run (こんにちは, Stdout)

import NREvent from com.newrelic.models

import One, Two as M2, Three from one.two.three

// Hello World in IZE
import * from ize.io
run ("Hello, World!\n", Stdout)

model MyEvent (
    eventType: Str,
    timestamp as "timestamp.ms": Int,
    attributes: Map[Str, Str],
    rest: ...
)